/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as PostsPostLayoutImport } from './routes/posts/_post-layout'
import { Route as PostsPostLayoutIndexImport } from './routes/posts/_post-layout.index'
import { Route as PostsPostLayoutPostIdIndexImport } from './routes/posts/_post-layout/$postId/index'

// Create Virtual Routes

const PostsImport = createFileRoute('/posts')()

// Create/Update Routes

const PostsRoute = PostsImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostLayoutRoute = PostsPostLayoutImport.update({
  id: '/_post-layout',
  getParentRoute: () => PostsRoute,
} as any)

const PostsPostLayoutIndexRoute = PostsPostLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsPostLayoutRoute,
} as any)

const PostsPostLayoutPostIdIndexRoute = PostsPostLayoutPostIdIndexImport.update(
  {
    id: '/$postId/',
    path: '/$postId/',
    getParentRoute: () => PostsPostLayoutRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsImport
      parentRoute: typeof rootRoute
    }
    '/posts/_post-layout': {
      id: '/posts/_post-layout'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsPostLayoutImport
      parentRoute: typeof PostsRoute
    }
    '/posts/_post-layout/': {
      id: '/posts/_post-layout/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsPostLayoutIndexImport
      parentRoute: typeof PostsPostLayoutImport
    }
    '/posts/_post-layout/$postId/': {
      id: '/posts/_post-layout/$postId/'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostLayoutPostIdIndexImport
      parentRoute: typeof PostsPostLayoutImport
    }
  }
}

// Create and export the route tree

interface PostsPostLayoutRouteChildren {
  PostsPostLayoutIndexRoute: typeof PostsPostLayoutIndexRoute
  PostsPostLayoutPostIdIndexRoute: typeof PostsPostLayoutPostIdIndexRoute
}

const PostsPostLayoutRouteChildren: PostsPostLayoutRouteChildren = {
  PostsPostLayoutIndexRoute: PostsPostLayoutIndexRoute,
  PostsPostLayoutPostIdIndexRoute: PostsPostLayoutPostIdIndexRoute,
}

const PostsPostLayoutRouteWithChildren = PostsPostLayoutRoute._addFileChildren(
  PostsPostLayoutRouteChildren,
)

interface PostsRouteChildren {
  PostsPostLayoutRoute: typeof PostsPostLayoutRouteWithChildren
}

const PostsRouteChildren: PostsRouteChildren = {
  PostsPostLayoutRoute: PostsPostLayoutRouteWithChildren,
}

const PostsRouteWithChildren = PostsRoute._addFileChildren(PostsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/posts': typeof PostsPostLayoutRouteWithChildren
  '/posts/': typeof PostsPostLayoutIndexRoute
  '/posts/$postId': typeof PostsPostLayoutPostIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/posts': typeof PostsPostLayoutIndexRoute
  '/posts/$postId': typeof PostsPostLayoutPostIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/posts': typeof PostsRouteWithChildren
  '/posts/_post-layout': typeof PostsPostLayoutRouteWithChildren
  '/posts/_post-layout/': typeof PostsPostLayoutIndexRoute
  '/posts/_post-layout/$postId/': typeof PostsPostLayoutPostIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/posts' | '/posts/' | '/posts/$postId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/posts' | '/posts/$postId'
  id:
    | '__root__'
    | '/'
    | '/posts'
    | '/posts/_post-layout'
    | '/posts/_post-layout/'
    | '/posts/_post-layout/$postId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PostsRoute: typeof PostsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PostsRoute: PostsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/posts"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/posts": {
      "filePath": "posts",
      "children": [
        "/posts/_post-layout"
      ]
    },
    "/posts/_post-layout": {
      "filePath": "posts/_post-layout.tsx",
      "parent": "/posts",
      "children": [
        "/posts/_post-layout/",
        "/posts/_post-layout/$postId/"
      ]
    },
    "/posts/_post-layout/": {
      "filePath": "posts/_post-layout.index.tsx",
      "parent": "/posts/_post-layout"
    },
    "/posts/_post-layout/$postId/": {
      "filePath": "posts/_post-layout/$postId/index.tsx",
      "parent": "/posts/_post-layout"
    }
  }
}
ROUTE_MANIFEST_END */
